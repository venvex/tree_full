{"ast":null,"code":"var _jsxFileName = \"/Users/stefan-alexandrujoldes/webify/client/saintgobain/int/andrei/tree-node/multi1/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport { Home } from \"./components/Home\";\nimport Tree from \"./components/Tree\";\nimport { data } from \"./components/data\";\n\n//functie de download json, pt debug ca sa vad mai usor daca nu actualizeaza date/nu randeaza\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst downloadJSON = (data, filename) => {\n  const blob = new Blob([JSON.stringify(data, null, 2)], {\n    type: \"application/json\"\n  });\n  const link = document.createElement(\"a\");\n  link.href = URL.createObjectURL(blob);\n  link.download = filename;\n  link.click();\n};\nfunction App() {\n  _s();\n  const [updatedData, setUpdatedData] = useState(data);\n  const handleTreeUpdate = updatedNode => {\n    console.log(\"primit din radacina:\", updatedNode);\n    const updatedTree = JSON.parse(JSON.stringify(updatedData)); // copy la date\n    const changesMade = mapNewData(updatedTree, updatedNode); //returnat din mapnewdata\n\n    if (changesMade) {\n      console.log(\"updated tree:\", updatedTree);\n      setUpdatedData(updatedTree); // actualizez state pt render\n    }\n  };\n\n  // let mapNewData = (original, updates) => {\n  //   let current_org = original;\n  //   let current_upd = updates;\n\n  //   let stop = false;\n\n  //   {\n  //     if (current_upd.status) {\n  //       current_org.status = current_upd.status;\n  //     }\n  //     if (current_upd.chil) {\n  //       for (let c_i in current_upd.chil) {\n  //         let child_upd = current_upd.chil[c_i];\n  //         for (let o_i in current_org.chil) {\n  //           if (current_org.chil[o_i].id === child_upd.id) {\n  //             mapNewData(current_org.chil[o_i], child_upd);\n  //           }\n  //         }\n  //       }\n  //     }\n  //   }\n  // };\n\n  const mapNewData = (original, updates) => {\n    let changed = false;\n    if (original.id === updates.id) {\n      // daca status e diferit, modific\n      if (original.status !== updates.status) {\n        original.status = updates.status;\n        changed = true;\n      }\n\n      // daca listele de copii difera, actualizez\n      if (JSON.stringify(original.chil) !== JSON.stringify(updates.chil)) {\n        original.chil = updates.chil;\n        changed = true;\n      }\n    } else if (original.chil && Array.isArray(original.chil)) {\n      for (let child of original.chil) {\n        //caut nodul modificat\n        if (mapNewData(child, updates)) {\n          //recurisv pt fiecare nod\n          changed = true;\n        }\n      }\n    }\n    return changed; //propag in handleTreeUpdate\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"App Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Router, {\n      basename: \"/home\",\n      children: [/*#__PURE__*/_jsxDEV(Routes, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nodes\",\n        children: /*#__PURE__*/_jsxDEV(Tree, {\n          nodeData: updatedData,\n          handleUpdate: updateData => {\n            console.log(\"updatat de la radacina\", updateData);\n            handleTreeUpdate(updateData);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => downloadJSON(updatedData, \"updatedTree.json\"),\n        children: \"download tree json\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ecpmoRtPicpFUPe+EFmeIAhg2D4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Route","Routes","Home","Tree","data","jsxDEV","_jsxDEV","downloadJSON","filename","blob","Blob","JSON","stringify","type","link","document","createElement","href","URL","createObjectURL","download","click","App","_s","updatedData","setUpdatedData","handleTreeUpdate","updatedNode","console","log","updatedTree","parse","changesMade","mapNewData","original","updates","changed","id","status","chil","Array","isArray","child","children","fileName","_jsxFileName","lineNumber","columnNumber","basename","path","element","className","nodeData","handleUpdate","updateData","onClick","_c","$RefreshReg$"],"sources":["/Users/stefan-alexandrujoldes/webify/client/saintgobain/int/andrei/tree-node/multi1/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport { Home } from \"./components/Home\";\nimport Tree from \"./components/Tree\";\nimport { data } from \"./components/data\";\n\n//functie de download json, pt debug ca sa vad mai usor daca nu actualizeaza date/nu randeaza\nconst downloadJSON = (data, filename) => {\n  const blob = new Blob([JSON.stringify(data, null, 2)], {\n    type: \"application/json\",\n  });\n  const link = document.createElement(\"a\");\n  link.href = URL.createObjectURL(blob);\n  link.download = filename;\n  link.click();\n};\n\nfunction App() {\n  const [updatedData, setUpdatedData] = useState(data);\n\n  const handleTreeUpdate = (updatedNode) => {\n    console.log(\"primit din radacina:\", updatedNode);\n\n    const updatedTree = JSON.parse(JSON.stringify(updatedData)); // copy la date\n    const changesMade = mapNewData(updatedTree, updatedNode); //returnat din mapnewdata\n\n    if (changesMade) {\n      console.log(\"updated tree:\", updatedTree);\n      setUpdatedData(updatedTree); // actualizez state pt render\n    }\n  };\n\n  // let mapNewData = (original, updates) => {\n  //   let current_org = original;\n  //   let current_upd = updates;\n\n  //   let stop = false;\n\n  //   {\n  //     if (current_upd.status) {\n  //       current_org.status = current_upd.status;\n  //     }\n  //     if (current_upd.chil) {\n  //       for (let c_i in current_upd.chil) {\n  //         let child_upd = current_upd.chil[c_i];\n  //         for (let o_i in current_org.chil) {\n  //           if (current_org.chil[o_i].id === child_upd.id) {\n  //             mapNewData(current_org.chil[o_i], child_upd);\n  //           }\n  //         }\n  //       }\n  //     }\n  //   }\n  // };\n\n  const mapNewData = (original, updates) => {\n    let changed = false;\n\n    if (original.id === updates.id) {\n      // daca status e diferit, modific\n      if (original.status !== updates.status) {\n        original.status = updates.status;\n        changed = true;\n      }\n\n      // daca listele de copii difera, actualizez\n      if (JSON.stringify(original.chil) !== JSON.stringify(updates.chil)) {\n        original.chil = updates.chil;\n        changed = true;\n      }\n    } else if (original.chil && Array.isArray(original.chil)) {\n      for (let child of original.chil) {\n        //caut nodul modificat\n        if (mapNewData(child, updates)) {\n          //recurisv pt fiecare nod\n          changed = true;\n        }\n      }\n    }\n\n    return changed; //propag in handleTreeUpdate\n  };\n\n  return (\n    <div>\n      <h1>App Home</h1>\n      <Router basename=\"/home\">\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n        </Routes>\n\n        <div className=\"nodes\">\n          <Tree\n            nodeData={updatedData}\n            handleUpdate={(updateData) => {\n              console.log(\"updatat de la radacina\", updateData);\n              handleTreeUpdate(updateData);\n            }}\n          />\n        </div>\n        <button onClick={() => downloadJSON(updatedData, \"updatedTree.json\")}>\n          download tree json\n        </button>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}